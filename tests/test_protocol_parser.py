#!/usr/bin/python
# -*- coding: utf-8 -*-
# coding=utf-8


import json
import os
import pickle
import re
import unittest

from analyser.contract_agents import ORG_LEVELS_re
from analyser.contract_patterns import ContractPatternFactory
from analyser.legal_docs import LegalDocument, DbJsonDoc
from analyser.ml_tools import SemanticTag
from analyser.parsing import AuditContext
from analyser.protocol_parser import find_protocol_org, find_org_structural_level, protocol_votes_re, ProtocolDocument
from analyser.runner import Runner
from analyser.structures import OrgStructuralLevel
from tests.test_utilits import load_json_sample


class TestProtocolParser(unittest.TestCase):

  def test_read_json(self):
    data = load_json_sample('protocol_1.json')
    print(data['parse'])

  def test_protocol_processor(self):
    json_doc = load_json_sample('protocol_1.json')
    jdoc = DbJsonDoc(json_doc)
    # print (doc)

    pp = Runner.get_instance().protocol_parser
    legal_doc = Runner.get_instance().make_legal_doc(jdoc)
    pp.find_org_date_number(legal_doc, AuditContext())

    orgtags = legal_doc.org_tags
    for t in orgtags:
      print(t)

    def tag_val(name):
      tag = SemanticTag.find_by_kind(orgtags, name)
      if tag is not None:
        return tag.value

    self.assertEqual('–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å –®–∏–ø–ø–∏–Ω–≥', tag_val('org-1-name'))
    self.assertEqual('–û–±—â–µ—Å—Ç–≤–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é', tag_val('org-1-type'))

  def get_doc(self, fn) -> (LegalDocument, ContractPatternFactory):
    pth = os.path.dirname(__file__)
    with open(os.path.join(pth, fn), 'rb') as handle:
      doc = pickle.load(handle)

    self.assertEqual(1024, doc.embeddings.shape[-1])

    return doc

  def test_load_picke(self):
    doc = self.get_doc('–ü—Ä–æ—Ç–æ–∫–æ–ª_–°–î_ 3.docx.pickle')
    doc: LegalDocument = doc
    for p in doc.paragraphs:
      print('üò± \t', doc.get_tag_text(p.header).strip(), 'üìÇ')

  def test_find_protocol_org_1(self):
    suff = ' ' * 300

    txt = '''–ü—Ä–æ—Ç–æ–∫–æ–ª ‚Ññ 3/2019 –ü—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤ –∑–∞–æ—á–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –°–æ–≤–µ—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –û–±—â–µ—Å—Ç–≤–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é ¬´–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä ¬´–ë–∞–∂–µ–Ω¬ª (–¥–∞–ª–µ–µ ‚Äì –û–û–û ¬´–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä ¬´–ë–∞–∂–µ–Ω¬ª) –≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –î–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ ¬´__¬ª _______ 2019 –≥–æ–¥–∞
    –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞ –±—é–ª–ª–µ—Ç–µ–Ω–µ–π –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —á–ª–µ–Ω–æ–≤ –°–æ–≤–µ—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ ¬´___¬ª__________ 2019 –≥–æ–¥–∞.
    ''' + suff
    doc = ProtocolDocument(LegalDocument(txt).parse())

    tags = find_protocol_org(doc)
    self.assertEqual('–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä ¬´–ë–∞–∂–µ–Ω¬ª', tags[0].value)
    self.assertEqual('–û–±—â–µ—Å—Ç–≤–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é', tags[1].value)

  def test_find_protocol_org_2(self):
    doc = self.get_doc('–ü—Ä–æ—Ç–æ–∫–æ–ª_–°–î_ 3.docx.pickle')
    print(doc[0:200].text)
    tags = find_protocol_org(doc)
    self.assertEqual('–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä ¬´–ë–∞–∂–µ–Ω¬ª', tags[0].value)
    self.assertEqual('–û–±—â–µ—Å—Ç–≤–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é', tags[1].value)

  def test_ORG_LEVELS_re(self):
    suff = ' ' * 300
    t = '''
    –ü–†–û–¢–û–ö–û–õ
–∑–∞—Å–µ–¥–∞–Ω–∏—è –°–æ–≤–µ—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –û–û–û ¬´–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å- –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏¬ª (–¥–∞–ª–µ–µ ‚Äì –û–û–û ¬´–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å- –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏¬ª –∏–ª–∏ ¬´–û–±—â–µ—Å—Ç–≤–æ¬ª)
–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞—Å–µ–¥–∞–Ω–∏—è:
''' + suff
    r = re.compile(ORG_LEVELS_re, re.MULTILINE | re.IGNORECASE | re.UNICODE)
    x = r.search(t)
    self.assertEqual('–°–æ–≤–µ—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤', x['org_structural_level'])

  def test_find_org_structural_level(self):
    t = '''
    –ü–†–û–¢–û–ö–û–õ \
    –∑–∞—Å–µ–¥–∞–Ω–∏—è –°–æ–≤–µ—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –û–û–û ¬´–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å - –í–Ω–µ–∑–µ–º–Ω–∞—è –õ—é–±–æ—Ñ—å–∏¬ª (–¥–∞–ª–µ–µ ‚Äì –û–û–û ¬´–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å-–í–ù–õ¬ª –∏–ª–∏ ¬´–û–±—â–µ—Å—Ç–≤–æ¬ª)\
    –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞—Å–µ–¥–∞–Ω–∏—è:
    ''' + ' ' * 900
    doc = LegalDocument(t)
    doc.parse()

    tags = list(find_org_structural_level(doc))
    self.assertEqual(OrgStructuralLevel.BoardOfDirectors.name, tags[0].value)

  def test_find_org_structural_level_2(self):
    t = '''
    –ü–†–û–¢–û–ö–û–õ –Ω–æ—á–Ω–æ–≥–æ –∑–∞—Å–µ–¥–∞–Ω–∏—è –ü—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—â–µ—Å—Ç–≤–∞ –û–û–û ¬´–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å - –í–Ω–µ–∑–µ–º–Ω–∞—è –õ—é–±–æ—Ñ—å¬ª (–¥–∞–ª–µ–µ ‚Äì –û–û–û ¬´–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å- –í–ù–õ¬ª –∏–ª–∏ ¬´–û–±—â–µ—Å—Ç–≤–æ¬ª)\
    –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞—Å–µ–¥–∞–Ω–∏—è:
    ''' + ' ' * 900
    doc = LegalDocument(t)
    doc.parse()

    tags = list(find_org_structural_level(doc))
    self.assertEqual(OrgStructuralLevel.BoardOfCompany.name, tags[0].value)

  def test_find_protocol_votes(self):
    doc = self.get_doc('–ü—Ä–æ—Ç–æ–∫–æ–ª_–°–î_ 3.docx.pickle')
    x = protocol_votes_re.search(doc.text)

    # for f in x:
    print(doc.text[x.span()[0]:x.span()[1]])

  def test_find_protocol_votes_2(self):
    t = '''
–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç –û–±—â–µ—Å—Ç–≤–∞ –∑–∞ 2017 –≥–æ–¥.
–ò—Ç–æ–≥–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:
 ¬´–ó–ê¬ª              8;
¬´–ü–†–û–¢–ò–í¬ª        –Ω–µ—Ç;
¬´–í–û–ó–î–ï–†–ñ–ê–õ–°–Ø¬ª  –Ω–µ—Ç.
–†–ï–®–ï–ù–ò–ï –ü–†–ò–ù–Ø–¢–û.
–†–µ—à–µ–Ω–∏–µ, –ø—Ä–∏–Ω—è—Ç–æ–µ –ø–æ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É –ø–æ–≤–µ—Å—Ç–∫–∏ –¥–Ω—è:
–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç –û–±—â–µ—Å—Ç–≤–∞ –∑–∞ 2017 –≥–æ–¥.'''

    doc = LegalDocument(t)
    doc.parse()

    x = protocol_votes_re.search(doc.text)

    match = doc.text[x.span()[0]:x.span()[1]]
    print(f'[{match}]')


unittest.main(argv=['-e utf-8'], verbosity=3, exit=False)
